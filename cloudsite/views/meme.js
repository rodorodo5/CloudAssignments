"use strict";angular.module("migsApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","ngTouch","ngMd5"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main"}).when("/about",{templateUrl:"views/about.html",controller:"AboutCtrl",controllerAs:"about"}).when("/assignments",{templateUrl:"views/assignments.html"}).when("/a2",{templateUrl:"views/a2.html"}).when("/a3",{templateUrl:"views/a3.html"}).when("/chart",{templateUrl:"views/chart.html",controller:"ChartCtrl",controllerAs:"chart"}).when("/a4",{templateUrl:"views/a4.html",controller:"A4Ctrl",controllerAs:"a4"}).when("/a6",{templateUrl:"views/a6.html"}).otherwise({redirectTo:"/"})}]),angular.module("migsApp").controller("MainCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("migsApp").controller("AboutCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("migsApp").controller("ChartCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"];var a={x:[1,2,3,4,5,6,7,8,9,10,11,12],y:[85,100,100,0,0,0,0,0,0,0,0,0],type:"scatter"},b=[a];Plotly.newPlot("myDiv",b)}),angular.module("migsApp").controller("A4Ctrl",["$scope","$http","md5",function(a,b,c){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"],a.names=[];for(var d=100,e=0,f=new Map,g=new Date,h="6c454472cc985829b464b06c7dc908fc9f5ed8ec",i="22f8edbc735e0e4d217bd6ad0d808bc7",j=c.createHash(g+h+i),k=!1;14*d>=e;){var l="https://gateway.marvel.com:443/v1/public/characters?ts="+g+"&apikey="+i+"&hash="+j+"&limit="+d+"&offset="+e;if(b.get(l).then(function(b){for(var c=b.data,d=c.data.results,e=0;e<d.length;e++)a.names.push(d[e].name),f.set(d[e].name,d[e].id)})["catch"](function(a){console.log("An error has occurred. "+a),k=!0}),k)break;e+=100}a.execute=function(){if(a.comicString="Loading Common Comics...",a.seriesString="Loading Common Series...",a.comics=[],a.series=[],null!=a.selectedName&&null!=a.selectedName2){var c=f.get(a.selectedName),d=f.get(a.selectedName2);document.getElementById("theDiv").style.visibility="visible";var e={method:"PUT",url:"https://mksjpypoh9.execute-api.us-east-1.amazonaws.com/TestStage/comics",headers:{"X-API-KEY":"dJYKAs1XFW8oAJj1dqj9X7VWztbQ8tyy3SNUkegI"},data:{id1:c,id2:d}},g=new Date;b(e).then(function(b){var c=b.data,d=new Date,e=(d.getTime()-g.getTime())/1e3;a.comics=m(c[0],c[1]),0==a.comics.length&&alert("No common comics found."),console.log(e),a.comicString="Common Comics ("+e+" seconds)"})["catch"](function(a){alert("An error has occurred. "+a)});var h={method:"PUT",url:"https://mksjpypoh9.execute-api.us-east-1.amazonaws.com/TestStage/series",headers:{"X-API-KEY":"dJYKAs1XFW8oAJj1dqj9X7VWztbQ8tyy3SNUkegI"},data:{id1:c,id2:d}},i=new Date;b(h).then(function(b){var c=b.data,d=new Date,e=(d.getTime()-i.getTime())/1e3;a.series=m(c[0],c[1]),0==a.series.length&&alert("No common series found."),a.seriesString="Common Series ("+e+" seconds)"})["catch"](function(a){alert("An error has occurred. "+a)})}};var m=function(a,b){for(var c=new Set,d=0;d<b.length;d++)a.includes(b[d])&&c.add(b[d]);return Array.from(c)}}]),angular.module("migsApp").run(["$templateCache",function(a){a.put("views/a2.html",'<div class="jumbotron"> <h1>Assignment #2</h1> </div> <p><b>1. Explain what CloudFormation is and write a yaml file to create a bucket using CloudFormation. 15 points.</b></p> <p>CloudFormation es un servicio ofrecido por AWS dirigido hacia desarrolladores y administradores. Su funciÃ³n es ofrecer un mÃ©todo sencillo para crear una colecciÃ³n de recursos de AWS relacionados entre sÃ­ para gestionarlos de una manera ordenada y predecible.</p> <pre><xmp>\n    Type: "AWS::S3::Bucket"\n    Properties:\n        AccessControl: PublicRead\n        BucketName: mmartbucket\n        WebsiteConfiguration:\n            ErrorDocument: 404.html\n            IndexDocument: index.html\n</xmp></pre> <div style="text-align:center"> <p><a href="https://github.com/migmarti/Cloud-Computing/blob/master/AssignmentCode/BucketCreation.yaml" target="_blank">YAML Bucket Creation</a></p> </div> <p><b>2. Create a Hello World in NodeJs and create a tutorial about it. 15 points.</b></p> <p>Node.js es un tiempo de ejecuciÃ³n (runtime) de JavaScript construido con el motor JavaScript de V8 de Chrome. Node.js utiliza un modelo de entrada y salida sin bloqueo, controlado por eventos, que lo hace ligero y eficiente. El siguiente tutorial explica cÃ³mo imprimir un mensaje de texto por medio de Node.js y HTTP en Ubuntu.</p> <p>1- Instalar una versiÃ³n actualizada de Node por medio de la terminal con los siguientes comandos. DeberÃ¡s ingresar tus credenciales de Ubuntu al ejecutar un comando sudo.</p> <pre><xmp>sudo apt-get update\nsudo apt-get install nodejs</xmp></pre> <p>2- Crear un archivo de texto con el siguiente cÃ³digo y salvarlo con extensiÃ³n js.</p> <pre><xmp>\nvar http = require(\'http\');\n\nvar server = http.createServer(function (request, response) {\n  response.writeHead(200, {"Content-Type": "text/plain"});\n  response.end("Hello World\\n");\n});\n\nserver.listen(8000);\n\nconsole.log("Server running at http://127.0.0.1:8000/");\n</xmp></pre> <div style="text-align:center"> <p><a href="https://github.com/migmarti/Cloud-Computing/blob/master/AssignmentCode/HelloWorldHttp.js" target="_blank">Node.js HTTP Hello World</a></p> </div> <p>3- Para ejecutar el cÃ³digo, ingresar la siguiente lÃ­nea en la terminal en el directorio del archivo.</p> <pre><xmp>node HelloWorldHttp.js</xmp></pre> <p>4- Para ver el mensaje, ingresa la direcciÃ³n del servidor en un navegador.</p> <p><b>3. Install the aws sdk for nodejs and create a tutorial about it. 15 points.</b></p> <p>El SDK de AWS permite eliminar la complejidad de la codificaciÃ³n, ya que proporciona objetos JavaScript para los servicios de AWS. Para instalarlo, se requiere Node.js y npm; una herramienta que facilita que los desarrolladores de JavaScript compartan, actualicen y reutilicen cÃ³digo compartido. El siguiente tutorial es para usuarios de Ubuntu.</p> <p>1- DespuÃ©s instalar nodejs, ingresar el siguiente comando:</p> <pre><xmp>sudo apt-get install npm</xmp></pre> <p>2- Instalar el sdk con el siguiente comando:</p> <pre><xmp>sudo npm install aws-sdk</xmp></pre> <p><b>4. Create a code in NodeJs that will tell you the version/date of your website in S3. 15 Points.</b></p> <pre><xmp>\nvar AWS = require(\'aws-sdk\');\nvar s3 = new AWS.S3();\n\nvar params = {\n	Bucket:\'mmartbucket\',\n	Key: \'index.html\'}\n\ns3.getObject(params, function(err, data) {\n	if (err) console.log(err, err.stack);\n	else console.log(\'The last modified date of \'+ params.Key + \' in \' + params.Bucket + \' is: \' + data.LastModified);\n});\n</xmp></pre> <div style="text-align:center"> <p><a href="https://github.com/migmarti/Cloud-Computing/blob/master/AssignmentCode/GetWebsiteDate.js" target="_blank">Get Date from Bucket Object</a></p> </div> <p><b>5. Read and explain the <a href="http://martinfowler.com/articles/microservice-trade-offs.html" target="_blank">post</a> about Microservices Trade-Offs by Martin Fowler. 15 points.</b></p> <p>Martin Fowler explica que muchos equipos de desarrollo han encontrado que el estilo arquitectÃ³nico de los microservicios es un acercamiento superior a la de una arquitectura monolÃ­tica. Sin embargo, otros equipos han descubierto que son una carga que impide la productividad. Como todo estilo arquitectÃ³nico, los microservicios traen costos y beneficios; sus â€˜trade-offsâ€™. Para hacer una elecciÃ³n confiable es necesario entenderlos y aplicarlos a su contexto especÃ­fico.</p> Entre los beneficios de los microservicios destacan los siguientes. Uno de ellos es el refuerzo de la estructura modular, lo cual es particularmente importante para los equipos de desarrolladores mÃ¡s grandes. AdemÃ¡s, estos servicios son mÃ¡s fÃ¡ciles de implementar y tienen menos probabilidades de causar fallas en el sistema cuando fallan individualmente. Finalmente, con microservicios es posible combinar mÃºltiples lenguajes, marcos de desarrollo y tecnologÃ­as de almacenamiento de datos, lo que incrementa la diversidad y flexibilidad del proyecto. <p>Las desventajas que surgen a partir de los microservicios incluyen la dificultad al programar sistemas distribuidos, ya que las llamadas remotas son lentas y siempre estÃ¡n en riesgo de fallo. TambiÃ©n, el mantenimiento de una consistencia fuerte es muy difÃ­cil para un sistema distribuido, lo que significa que todos tienen que gestionar la consistencia final. Por Ãºltimo, se necesita un equipo experimentado de operaciones para manejar mÃºltiples servicios que se estÃ¡n asignando regularmente, lo cual implica una carga pesada de trabajo.</p> <p><b>6. Create a comparison table between AWS, Azure and Google Cloud. 15 points.</b></p> <style>table, th, td {\n        border: 1px solid black;\n    }</style> <table> <thead> <tr> <td></td> <th>Azure</th> <th>AWS</th> <th>Google Cloud</th> </tr> </thead> <tbody> <tr> <th>Regiones Disponibles</th> <td>Azure Regions</td> <td>AWS Global Infrastructure</td> <td>Google Compute Regions and Zones</td> </tr> <tr> <th>Servicios de CÃ³mputo</th> <td>Virtual Machines (VMs)</td> <td>Elastic Compute Cloud (EC2)</td> <td>Compute Engine</td> </tr> <tr> <th>CÃ³mputo Serverless</th> <td>Azure Functions</td> <td>AWS Lambda</td> <td>Google Cloud Functions</td> </tr> <tr> <th>Almacenamiento de Objetos</th> <td>Azure Storage</td> <td>Amazon Simple Storage (S3)</td> <td>Cloud Storage</td> </tr> <tr> <th>Opciones de Bases de Datos</th> <td>Azure SQL Database</td> <td>Amazon RDS & Amazon Redshift</td> <td>Cloud SQL & Cloud Spanner</td> </tr> <tr> <th>AdministraciÃ³n y Seguridad</th> <td>Azure Active Directory</td> <td>AWS Directory Service & AWS IAM</td> <td>Cloud IAM</td> </tr> <tbody> </tbody></tbody></table> <p><b>7. Read at least 5 sections of Seth Godinâ€™s Manifesto: â€œStop Stealing Dreamsâ€ and tell me what you think about it. 10 points.</b></p> <p>Yo opino que la escuela no es el Ãºnico factor responsable de â€œrobar sueÃ±osâ€; tambiÃ©n afecta las experiencias y condiciones de vida que han afectado cada quien. Ciertas familias, instituciones y gobiernos alrededor del mundo otorgan un mayor Ã©nfasis a la fomentaciÃ³n de la educaciÃ³n. Por ello, la calidad de la educaciÃ³n y el cultivo de sueÃ±os puede variar inmensamente.</p> <p>Al recibir una educaciÃ³n de baja calidad, es entendible reconocer el robo de un sueÃ±o. Entre las grandes causas de este fenÃ³meno se encuentra en el hecho de inculcar u obligar temas que no son de interÃ©s para los estudiantes, u otorgÃ¡ndoles de una manera desorganizada y sin pasiÃ³n. Creo que la pasiÃ³n, junto con la voluntad, son las fuerzas mÃ¡s importantes en las Ã¡reas personal, acadÃ©mica y profesional de la vida moderna, pero la educaciÃ³n mal manejada la suprime.</p> <p>Mi punto es que todo puede estar tratando de robar nuestros sueÃ±os y solo nosotros podemos defendernos mediante la pasiÃ³n y la mera fuerza de voluntad. Opino que no deberÃ­amos culpar las escuelas, gobiernos y demÃ¡s, sino a nosotros mismos por no poder quebrar los obstÃ¡culos que se presentan. Sin embargo, segÃºn la calidad de vida de cada quien, este acto de quebrar barreras llega a ser difÃ­cil, pero nunca es imposible.</p> <div style="text-align:center"> <a ng-href="/#!/assignments"><button>Back</button></a> </div>'),a.put("views/a3.html",'<div class="jumbotron"> <h1>Assignment #3</h1> </div> <p><b>1. Create a NodeJS script that will do the following:<br> &emsp;â€¢ Download the image from s3://cc414-images/scientist.png.<br> &emsp;â€¢ Check if the metadata key â€œx-amz-meta-moveâ€ of the image is true.<br> &emsp;â€¢ If true, upload the image to s3://cc414-images/{MATRICULA}/image.png <br> &emsp;â€¢ 20 points.</b></p> <pre><xmp>\nconst aws = require(\'aws-sdk\');\nconst s3 = new aws.S3();\n\nvar getParams = {\n        Bucket: \'cc414-images\',\n        Key: \'scientist.png\'\n}\n\ns3.getObject(getParams, function(err, data) {\n    if (err){\n        console.log(err);\n        return err;\n    }\n    else if (data.Metadata) {\n  	var putParams = {\n            Bucket: \'cc414-images\',\n            Key: \'20159/image.png\',\n            Body: data.Body\n        }\n        s3.putObject(putParams, function(err, res) {\n            if(err){\n                console.log(err);\n                return err;\n            }\n            else {\n                console.log("Successfully uploaded image to " + putParams.Key +\n			    " in bucket " + putParams.Bucket);\n            }\n        });\n    }\n});\n</xmp></pre> <div style="text-align:center"> <p><a href="https://github.com/migmarti/Cloud-Computing/blob/master/AssignmentCode/GetPutImage.js" target="_blank">Get and Put S3 Image</a></p> </div> <p><b>1. Create a NodeJS script that will do the following:<br> &emsp;â€¢ Will get the Nasa Astronomy Picture of the day.<br> &emsp;â€¢ Save the image in the local file system.<br> &emsp;â€¢ Print the title of the image.<br> &emsp;â€¢ 20 points.</b></p> <pre><xmp>\nvar http = require(\'https\');\nvar request = require(\'request\');\nvar apiKey = "L9JyFoaQrUvDKSdGmMrMmyqicsOBNhVx5IaAGRED";\nvar url = \'https://api.nasa.gov/planetary/apod?api_key=\'+apiKey;\nvar fileStream = require(\'fs\');\n\nhttp.get(url, (res) => {\n    res.setEncoding(\'utf8\');\n    res.on("data", (data) => {\n        var info = JSON.parse(data);\n        console.log("\\nTitle: "+ info.title +\n                    "\\n\\nExplanation: "+ info.explanation +\n                    "\\n\\nCopyright: "+ info.copyright +\n                    "\\n\\nDate: "+ info.date);\n        console.log("\\nDownloading image from: " + info.url);\n        var request = http.get(info.url, function(response) {\n            var file = fileStream.createWriteStream(info.title + ".jpg");\n            response.pipe(file);\n            console.log("Download complete. Saved on local directory.");\n        });\n    });\n});\n</xmp></pre> <div style="text-align:center"> <p><a href="https://github.com/migmarti/Cloud-Computing/blob/master/AssignmentCode/NasaPictureOfTheDay.js" target="_blank">NASA Picture of the Day</a></p> </div> <p><b>3. Implement Google Analytics in your personal web site (All teams will do the same for their Final Project). 20 points.</b></p> <p>El siguiente cÃ³digo se ubica en el index.html de esta aplicaciÃ³n.</p> <pre><xmp>\n    <script>\n  (function(i,s,o,g,r,a,m){i[\'GoogleAnalyticsObject\']=r;i[r]=i[r]||function(){\n      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n'+"  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-106127999-1', 'auto');\n  ga('send', 'pageview');\n    </script>\n</xmp></pre> <p><b>4. Read and explain the following article by Martin Fowler: <a href=\"http://martinfowler.com/articles/richardsonMaturityModel.html\" target=\"_blank\">Link.</a> 20 points.</b></p> <p>Este artÃ­culo habla sobre un modelo desarrollado por el autor de RESTful Web API, Leonard Richardson, que descompone los principales elementos de un enfoque REST en tres pasos. Estos son recursos, verbos HTTP y controles de hipermedia. Para establecer los puntos estructurales del modelo, se han definido cuatro niveles, empezando desde 0.</p> <p>El nivel 0 indica el punto de partida para el modelo. Se empieza utilizando HTTP como un sistema de transporte para interacciones remotas, pero sin usar ninguno de los mecanismos de la web. Es decir, se implementa HTTP como un mecanismo de tunelizaciÃ³n para una interacciÃ³n remota.</p> <p>Martin Fowler ejemplifica este proceso con realizar una cita con su mÃ©dico. En un escenario de nivel 0, el hospital expondrÃ¡ un punto final de servicio en algÃºn URI. El software de citas primero necesita saber quÃ© ranuras abiertas tiene su mÃ©dico en una fecha determinada, por lo que hace una solicitud del sistema de citas del hospital para obtener esa informaciÃ³n. A continuaciÃ³n, postea a ese punto final un documento que contiene los detalles de su solicitud. En fin, menciona que es simplemente lanzar documentos XML de ida y vuelta.</p> <p>En el nivel 1 se introducen los recursos. Esencialmente, en lugar de hacer todas las peticiones a un punto final de servicio singular, ahora se empieza a hablar con recursos individuales. Fowler explica que la diferencia ahora es que si alguien necesita hacer algo acerca de la cita, como reservar algunas pruebas, primero se apoderan del recurso de cita, que podrÃ­a tener un URI como http://royalhope.nhs.uk/slots/1234/appointment, y publicar en ese recurso.</p> <p>El nivel 2 abarca los verbos de HTTP. Fowler utilizÃ³ HTTP POST verbos para todas sus interacciones en el nivel 0 y 1, y explica que algunas personas utilizan GETs en su lugar o ademÃ¡s. Menciona que en estos niveles no hace mucha diferencia, ambos son utilizados como mecanismos de tunelizaciÃ³n. El nivel 2 se aleja de esto, utilizando los verbos HTTP lo mÃ¡s cerca posible de cÃ³mo se utilizan en el propio HTTP. Para la lista de ranuras, se realizo una operaciÃ³n GET.</p> <p>Se remarca que en el nivel 2 el uso de GET para una solicitud es crucial debido a que permite que cualquier participante en el enrutamiento de las solicitudes usar almacenamiento en cachÃ©, lo que es un elemento clave en el rendimiento de la web.</p> <p>El Ãºltimo nivel trata de HATEOAS (Hipertexto como el motor del estado de aplicaciÃ³n). El punto de los controles de hipermedia es que nos dicen lo que podemos hacer a continuaciÃ³n, y la URI del recurso que necesitamos manipular para hacerlo. En lugar de tener que saber dÃ³nde se publica la solicitud de cita, los controles hipermedia dicen cÃ³mo hacerlo. Una ventaja de los controles hipermedia es que permite al servidor cambiar su esquema URI sin romper clientes.</p> <p>Al finalizar el articulo, Fowler menciona los significados de los niveles 1-3. El Nivel 1 aborda la cuestiÃ³n de manejar la complejidad mediante el uso de dividir y conquistar, rompiendo un extremo de servicio de gran tamaÃ±o hacia abajo en mÃºltiples recursos. Nivel 2 introduce un conjunto estÃ¡ndar de verbos para que se puedan manejar situaciones de la misma manera, eliminando variaciones innecesarias. El nivel 3 introduce la posibilidad de descubrimiento, proporcionando una forma de hacer un protocolo mÃ¡s auto-documentado.</p> <p><b>5. Explain why cloud computing is important. 10 points.</b></p> <p>La computaciÃ³n en nube permite a las personas utilizar diversos tipos de aplicaciones de software a travÃ©s del Internet de una manera mÃ¡s conveniente y efectiva. El enfoque hacia esta computacion puede traer numerosos beneficios, tales como la flexibilidad, accesibilidad remota, recuperaciÃ³n de desastres, seguridad, automatizaciÃ³n y hasta amigabilidad hacia el medio ambiente.</p> <p>No solo tiene su importancia en las ciencias computacionales, es indispensable en casi todos los campos profesionales y acadÃ©micos. Sus funciones incluyen el aprovisionamiento, la ampliaciÃ³n y el mantenimiento de aplicaciones y servidores. Puede proporcionar bases de datos y servidores rÃ¡pidamente, y tener aplicaciones en funcionamiento en cualquier momento. En adiciÃ³n, puede utilizarse para supervisar las distintas partes de un sistema y realizar un seguimiento del tiempo de actividad, el tiempo de respuesta y mandar alertas importantes.</p> <p><b>6. Explain what would like to change in this class and why. 10 points.</b></p> <p>Me gusta el enfoque prÃ¡ctico y Ã¡gil que trae la clase aunque en ocasiones me pierdo debido al ritmo de paso acelerado. Eso es una debilidad personal y reconozco que debo acostumbrarme a la estructura de la clase. No cambiarÃ­a la manera en la que se da la materia.</p> <div style=\"text-align:center\"> <a ng-href=\"/#!/assignments\"><button>Back</button></a> </div>"),a.put("views/a4.html",'<div class="jumbotron"> <h1>Assignment #4 - #5</h1> </div> <p><a href="https://github.com/migmarti/Cloud-Computing/blob/master/app/scripts/controllers/a4.js" target="_blank">Github Link</a></p> <div> <div> <p>Character 1: <select ng-model="selectedName" ng-options="x for x in names | orderBy"> </select></p> <p>Character 2: <select ng-model="selectedName2" ng-options="x for x in names| orderBy"> </select></p> </div> <br> <div style="text-align:center"> <button ng-click="execute()">Execute</button> </div> </div> <br> <div style="visibility:hidden" id="theDiv"> <div style="text-align:center"> <p><b>{{selectedName}} and {{selectedName2}}</b></p> </div> <br> <div class="row"> <div class="column" style="text-align:center"> <p><b>{{comicString}}</b></p> <div ng-repeat="comic in comics track by $index">{{comic}}</div> </div> <div class="column" style="text-align:center"> <p><b>{{seriesString}}</b></p> <div ng-repeat="s in series track by $index">{{s}}</div> </div> </div> </div> <br> <p><b>List the 3 main things you need to do in order achieve your professional goals:</b></p> <p>- Aceptar errores y aprender de ellos para no repetirlos.</p> <p>- No dejar que los fracasos impidan el progreso.</p> <p>- Tomar iniciativa; no caer en inactividad.</p> <div style="text-align:center"> <a ng-href="/#!/assignments"><button>Back</button></a> </div>'),a.put("views/a6.html",'<div class="jumbotron"> <h1>Assignment #6</h1> </div> <p><b>1. Read the AWS Well Architected Framework and make a summary about the 5 pillars. <a href="https://d0.awsstatic.com/whitepapers/architecture/AWS_Well-Architected_Framework.pdf" target="_blank"> Link </a> </b></p> <p>El AWS Well-Architected Framework permite a los usuarios verificar y mejorar sus arquitecturas basadas en la nube y comprender mÃ¡s a fondo el impacto de sus decisiones de diseÃ±o. Los sistemas diseÃ±ados con una arquitectura Ã­ntegra pueden llegar a aumentar en gran medida la probabilidad de Ã©xito, por lo tanto es indispensable conocer lo que constituye un marco de trabajo efectivo. Se abordan los principios generales de diseÃ±o, asÃ­ como las mejores prÃ¡cticas especÃ­ficas y la orientaciÃ³n en cinco Ã¡reas conceptuales definidas como pilares: seguridad, fiabilidad, eficiencia de rendimiento, optimizaciÃ³n de costes y excelencia operacional.</p> <p>El pilar de la seguridad aborda la capacidad de proteger la informaciÃ³n, los sistemas y los bienes relacionados mientras se genera valor empresarial a travÃ©s de evaluaciones de riesgo y estrategias de mitigaciÃ³n. Para fortalecer la seguridad de un sistema existe una serie de principios que pueden ser implementadas. Uno de estos principios consiste en aplicar firewalls y controles de seguridad en todos los recursos en cada capa. Otra medida recomendable es asegurar que la autorizaciÃ³n sea apropiada para cada interacciÃ³n con los recursos de Amazon Web Services e implementar fuertes controles de acceso lÃ³gico directamente en los recursos. Finalmente, se recomienda utilizar AWS Shared Responsibility Model para centrar la seguridad de la aplicaciÃ³n, los datos y sistemas operativos mientras AWS proporciona infraestructura y servicios seguros.</p> <p>El pilar de fiabilidad incluye la capacidad de un sistema para recuperarse de interrupciones de infraestructura o servicio, adquirir dinÃ¡micamente recursos de cÃ³mputo para satisfacer la demanda y mitigar interrupciones como configuraciones errÃ³neas o problemas de red transitorios. En la nube, es recomendable probar cÃ³mo falla el sistema y poder validar los procedimientos de recuperaciÃ³n. AdemÃ¡s, al supervisar un sistema para indicadores clave de rendimiento (KPI), se puede activar la automatizaciÃ³n cuando se rebasa un lÃ­mite establecido. Esto da paso a la notificaciÃ³n automÃ¡tica y el seguimiento de los fallos, asÃ­ como los procesos de recuperaciÃ³n automatizados que funcionan o reparan el fallo.</p> <p>Otra manera para incrementar la fiabilidad de un sistema es implementar la escala horizontal para aumentar la disponibilidad del sistema agregado; esto es reemplazar un recurso grande con mÃºltiples recursos pequeÃ±os para reducir el impacto de un solo fallo en el sistema general. La capacidad de un sistema es tambiÃ©n un factor considerable que puede ser manejada de manera fiable al supervisar la demanda y la utilizaciÃ³n del sistema, y automatizar la adiciÃ³n o remociÃ³n de recursos para mantener el nivel Ã³ptimo satisfactorio.</p> <p>El pilar de eficiencia de rendimiento se centra en el uso competente de los recursos para cumplir requisitos requisitos y mantener esa eficiencia conforme fluctÃºa la demanda y la evoluciÃ³n de tecnologÃ­as. Para promover la eficiencia, se puede utilizar arquitecturas sin servidor, ya que en la nube eliminan la necesidad de ejecutar y mantener servidores para llevar a cabo actividades. En adiciÃ³n, disponer de recursos virtuales y automatizables permite realizar rÃ¡pidamente pruebas comparativas utilizando diferentes tipos de instancias, almacenamiento o configuraciones, lo cual promueve la experimentaciÃ³n benefica para el rendimiento. Un punto importante menciona que un sistema con buen rendimiento dispone de un enfoque de tecnologÃ­a que se alinea mejor con lo que estÃ¡ tratando de lograr, ejerciendo el concepto de la â€˜simpatÃ­a mecÃ¡nicaâ€™.</p> <p>El pilar enfocado en la optimizaciÃ³n de costes incluye el proceso continuo de refinamiento y mejora de un sistema a lo largo de su vida. Desde el diseÃ±o inicial en la primera prueba de concepto hasta el funcionamiento continuo de las cargas de trabajo de producciÃ³n, la optimizaciÃ³n permitirÃ¡ construir y operar sistemas de costos que logren resultados y minimicen costos, permitiendo asÃ­ a negocios maximizar su retorno de inversiÃ³n. Una manera importante de implementar esta optimizaciÃ³n es adoptar un modelo de consumo en donde sÃ³lo se paga por los recursos informÃ¡ticos que se consumen y aumentar o disminuir el uso dependiendo de los requisitos del negocio, no mediante el uso de pronÃ³sticos elaborados. AdemÃ¡s, es recomendable utilizar servicios gestionados para reducir el coste de propiedad. En la nube, los servicios gestionados eliminan la carga operativa de mantener servidores y pueden ofrecer un menor coste por transacciÃ³n o servicio.</p> <p>El pilar de excelencia operacional incluye prÃ¡cticas y procedimientos usados â€‹â€‹para manejar cargas de trabajo de producciÃ³n. Esto incluye cÃ³mo se ejecutan los cambios planificados, asÃ­ como las respuestas a eventos inesperados. La ejecuciÃ³n de cambios y las respuestas deberÃ­an ser automatizadas. Todos los procesos y procedimientos de excelencia operacional deben documentarse, probarse y revisarse periÃ³dicamente. Los procesos se deberÃ­an alinear con los objetivos empresariales para asÃ­ reducir el ruido en mÃ©tricas y apoyar las necesidades crÃ­ticas de la empresa.</p> <p>Otras recomendaciones para lograr la excelencia operacional es poner los procesos para que todos los tipos de eventos y fallos operacionales sean capturados, revisados â€‹â€‹y luego utilizados para mejoras. Las revisiones regulares de las operaciones deberÃ­an dar lugar a mejoras en los procesos que impulsen la excelencia operacional. Por Ãºltimo, se deberÃ­an mantener actualizados estos procedimientos; las guÃ­as de procesos y procedimientos deben adaptarse a medida que evolucionan los entornos y las operaciones.</p> <p><b>2. Explain how you will apply the AWS Well Architecture Framework to your project.</b></p> <p>El hecho implementar AWS Well Architecture Framework a nuestro proyecto nos ayudarÃ¡ a producir un sistema estable y eficiente, lo que nos permite centrarnos en los requisitos funcionales. En cuestiÃ³n de seguridad, gestionaremos identidades y accesos mediante IAM como partes clave, garantizando que sÃ³lo los usuarios autorizados y autenticados puedan acceder a los recursos y sÃ³lo de la manera que se pretende. En adiciÃ³n, Amazon S3 cuenta con capacidades de encriptaciÃ³n.</p> <p>Durante el desarrollo del proyecto, se espera que ocurran fallas, y necesitamos saber cÃ³mo tomar conciencia de estos fracasos, responder a ellos y evitar que vuelvan a ocurrir. Por ende, planeamos realizar regularmente una copia de seguridad de los datos y probar los archivos de copia de seguridad para asegurarnos de que puede recuperarse de los errores fÃ­sicos y lÃ³gicos. Para incrementar la fiabilidad y excelencia operacional, utilizaremos plantillas AWS CloudFormation para la creaciÃ³n de recursos AWS y su proporciÃ³n de manera ordenada y predecible.</p> <p>Nuestra arquitectura estÃ¡ basada principalmente en cÃ³mputo a travÃ©s de funciones AWS Lambda, lo cual nos permite ejecutar codigo sin iniciar una instancia y asÃ­ mantener al tanto con demandas. Para el monitoreo de rendimiento y costo, utilizaremos CloudWatch para obtener mÃ©tricas y notificaciones.</p> <div style="text-align:center"> <a ng-href="/#!/assignments"><button>Back</button></a> </div>'),a.put("views/about.html",'<div class="jumbotron"> <h1>About</h1> <p>Miguel Angel Martinez Garibay</p> <p>Computer Science Engineering Student</p> <p>miguel.martinez@cetys.edu.mx</p> <p><a href="https://github.com/migmarti" target="_blank"> Github </a></p> </div>'),a.put("views/assignments.html",'<div class="jumbotron"> <h1>Assignments</h1> <p><a href="https://docs.google.com/a/cetys.edu.mx/document/d/1rEaqUZkO0HaAuU01GjEn2PYm6Y6eavX5DoNpFAxRVs4/edit?usp=sharing" target="_blank"> <b>Assignment #1</b></a></p> <p><a href="/#!/a2"> <b>Assignment #2</b></a></p> <p><a href="/#!/a3"> <b>Assignment #3</b></a></p> <p><a href="/#!/a4"> <b>Assignment #4 - #5</b></a></p> <p><a href="/#!/a6"> <b>Assignment #6</b></a></p> <p><a href="https://drive.google.com/a/cetys.edu.mx/file/d/0B8FxxW5mLpUWbHY3a18tX2ZBekE/view?usp=sharing" target="_blank"> <b>Cloud Environment Setup</b></a></p> <p><a href="https://drive.google.com/a/cetys.edu.mx/file/d/0B8FxxW5mLpUWLVZnQWxYMUpnb2c/view?usp=sharing" target="_blank"> <b>Website Deployment</b></a></p> </div>'),a.put("views/chart.html",'<div class="jumbotron"> <h1>Performance Chart</h1> </div> <div id="myDiv"></div>'),a.put("views/main.html",'<div class="jumbotron"> <h1>Cloud Computing</h1> <!--style="width:530px;height:324px;"--> <img src="images/giphy.94f5bdf3.gif" alt="Cool gif"> <p class="lead">Miguel Martinez 20159</p> </div>')}]);